(1) hcpp を使えるようにします。

    トップ -> C/C++ プリプロセッサ -> hcpp ビルド方法

    を参照してください。以下 C:\10_hcpp\src\x64\Debug\hcpp.exe がビルドされたと
    仮定して説明します。

(2) hcc1 を使えるようにします。

    トップ -> Cコンパイラ -> hcc1 ビルド方法

(3) docgen.dll を使えるようにします。

    トップ -> ドキュメントジェネレータ -> docgen.dll のビルド方法

(4) doclink を使えるようにします。

    トップ -> ドキュメントジェネレータ -> doclink のビルド方法

(5) W32TeXをインストールします。以下 C:\w32tex にインストールされたと仮定して説明し
    ます。

(6) サンプルソースを作成します。
    % cat a.c
    #include <stdio.h>

    int main()
    {
      printf("hello world\n");
      return 0;
    }
    %

(7) hcpp でプリプロセスします。
    % C:/10_hcpp/x64/Debug/hcpp.exe -o a.i -L a.j a.c -IC:/cygwin64/usr/include -IC:/cygwin64/lib/gcc/x86_64-pc-cygwin/7.3.0/include -D__CYGWIN__ -D__WCHAR_TYPE__="unsigned short int" -D__declspec\(a\)= -D__cdecl= -D__inline__=inline -D__extension__= -D__attribute__\(a\)= -D__builtin_va_list='char*' -D__builtin_stdarg_start=__builtin_va_start -D__asm__=asm -W 0 -H

    これにより a.i と a.j が作成されます。

    -IC:/cygwin64/usr/include
    -IC:/cygwin64/lib/gcc/x86_64-pc-cygwin/7.3.0/include

    は環境に合わせて変更してください。必要であれば

    トップ -> C/C++ プリプロセッサ -> hcpp のコマンドライン

    も参照してください。

(8) hcc1, docgen.dll でコンパイルします。
    % C:/20_hcc1/src/x64/Debug/hcc1.exe --generator C:/39_docgen/src/x64/Debug/docgen.dll -o a.x a.i

    これにより a.x が作成されます。

(9) doclink で a.tex を作成します。

    % C:/39_docgen/doclink/x64/Debug/doclink.exe -o a.tex a.j a.x --exclude-dir C:/cygwin64/usr/include --exclude-dir C:/cygwin64/lib/gcc/x86_64-pc-cygwin/7.3.0/include

(10) TeX コンパイルして、ドキュメントを表示します。
    % cat doc.tex
    \documentclass{jreport}

    \begin{document}

    \input{a.tex}
  
    \end{document}
    % C:/w32tex/bin/platex.exe doc.tex
    ... (省略)
    % C:/w32tex/dviout/dviout.exe doc.dvi
